{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","getReorderedGoods","reverse","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA9BD,SACLC,EACAL,GAEA,IAAMI,EAAY,YAAOC,GAEzB,OAAQL,GACN,KAAKL,EAASI,KACZ,OAAOK,EAET,KAAKT,EAASW,SACZ,OAAO,YAAIF,GAAcG,MAAK,SAACC,EAAOC,GACpC,OAAOD,EAAME,cAAcD,MAG/B,KAAKd,EAASgB,OACZ,OAAO,YAAIP,GAAcG,MAAK,SAACC,EAAOC,GACpC,OAAOD,EAAMI,OAASH,EAAMG,UAOlC,OAAOR,EAMcS,CAAkBjB,EAAiBI,GAMxD,OAJIE,GACFE,EAAaU,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYjB,IAAaL,EAASW,WAEpCY,QAAS,kBAAMjB,GAAY,kBAAMN,EAASW,aAL5C,iCAUA,wBACEU,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYjB,IAAaL,EAASgB,SAEpCO,QAAS,kBAAMjB,GAAY,kBAAMN,EAASgB,WAL5C,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAaf,IAEfgB,QAAS,kBAAMf,GAAc,kBAAOD,MALtC,sBAUGF,IAAaL,EAASI,MAAQG,IAE7B,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,GAAY,kBAAMN,EAASI,QAC3BI,GAAc,IALlB,sBAaN,6BACE,6BACGC,EAAae,KAAI,SAAAC,GAChB,OACE,oBACE,UAAQ,OADV,SAIGA,GAFIA,cC/GrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4626e7c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.NONE:\n      return visibleGoods;\n\n    case SortType.ALPHABET:\n      return [...visibleGoods].sort((good1, good2) => {\n        return good1.localeCompare(good2);\n      });\n\n    case SortType.LENGTH:\n      return [...visibleGoods].sort((good1, good2) => {\n        return good1.length - good2.length;\n      });\n\n    default:\n      break;\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType);\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={() => setSortType(() => SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => setSortType(() => SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(() => !isReversed)}\n        >\n          Reverse\n        </button>\n\n        { (sortType !== SortType.NONE || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortType(() => SortType.NONE);\n                setIsReversed(false);\n              }}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => {\n            return (\n              <li\n                data-cy=\"Good\"\n                key={good}\n              >\n                {good}\n              </li>\n            );\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}